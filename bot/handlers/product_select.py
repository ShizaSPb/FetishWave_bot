"""
–í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–∞–≥–∞ –≤ context.user_data["current_payment_type"].
–ö–æ–º–∞–Ω–¥–∞: /products
–ö–Ω–æ–ø–∫–∏: prod:<slug>
–≠–∫—Å–ø–æ—Ä—Ç: product_select_handlers (–¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ __init__.py)
"""
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler

# === –ù–∞—Å—Ç—Ä–æ–π –∑–¥–µ—Å—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ SLUG-–∏ –∏–∑ Notion.Products ===
PRODUCT_SLUGS = {
    "üé• –í–µ–±–∏–Ω–∞—Ä JOI (demo)": "webinar_joi",
    # "üì¶ Starter Pack (PDF)": "starter_pack_pdf",
}

def _build_products_keyboard() -> InlineKeyboardMarkup:
    rows = []
    for title, slug in PRODUCT_SLUGS.items():
        rows.append([InlineKeyboardButton(title, callback_data="prod:" + slug)])
    return InlineKeyboardMarkup(rows)

async def cmd_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (/products)."""
    kb = _build_products_keyboard()
    if update.effective_message:
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)

async def on_pick_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π slug –≤ user_data."""
    q = update.callback_query
    if not q or not q.data or not q.data.startswith("prod:"):
        return
    slug = q.data.split(":", 1)[1]
    context.user_data["current_payment_type"] = slug
    await q.answer("–ü—Ä–æ–¥—É–∫—Ç –≤—ã–±—Ä–∞–Ω.")
    try:
        await q.edit_message_reply_markup(reply_markup=None)
    except Exception:
        pass
    await q.message.reply_text(u"‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {0}\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã.".format(slug))

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤ –æ–±—â–µ–º –º–µ—Å—Ç–µ
product_select_handlers = [
    CommandHandler("products", cmd_products),
    CallbackQueryHandler(on_pick_product, pattern=r"^prod:"),
]
