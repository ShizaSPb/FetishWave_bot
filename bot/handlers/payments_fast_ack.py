
# bot/handlers/payments_fast_ack.py
"""
–ë—ã—Å—Ç—Ä—ã–π ACK + –∂—ë—Å—Ç–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.
–û–±–Ω–æ–≤–ª–µ–Ω–∏—è v7:
- –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ‚Äë–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ¬´üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç‚Ä¶¬ª
  –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ `upload_prompt_msg_id`, –Ω–æ –∏ –ø–æ `last_menu_message_id` (–Ω–∞ —Å–ª—É—á–∞–π,
  –µ—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–æ—Å—å –∫–∞–∫ ¬´–ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ–Ω—é¬ª).
- –û—á–∏—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –∏–∑ user_data, —á—Ç–æ–±—ã –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞ –Ω–µ –ø—ã—Ç–∞–ª–∞—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
"""
from __future__ import annotations

import logging
import time
from typing import Optional, Iterable

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ApplicationHandlerStop,
)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ (—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ —Ñ–æ–ª–ª–±—ç–∫–∞–º–∏) ---
try:
    from config import ADMIN_IDS  # set[int] –∏–ª–∏ list[int]
except Exception:
    ADMIN_IDS = []  # type: ignore

try:
    from bot.utils.keyboards import get_main_menu_keyboard
except Exception:
    def get_main_menu_keyboard(lang: str):
        return None

try:
    from .menu import show_main_menu
except Exception:
    async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, cleanup_previous: bool = True):
        if update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=get_main_menu_keyboard(context.user_data.get('lang', 'ru')),
            )

try:
    from bot.utils.admin_keyboards import get_admin_payment_actions_kb
except Exception:
    def get_admin_payment_actions_kb(payment_id: str):
        return None

try:
    from bot.services.actions import log_action
except Exception:
    def log_action(*args, **kwargs):
        pass

log = logging.getLogger(__name__)

# ---- –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ ----
def _btn_text(lang: str) -> str:
    if str(lang).startswith('sr'):
        return "–ù–∞–∑–∞–¥ —É –≥–ª–∞–≤–Ω–∏ –º–µ–Ω–∏"
    elif str(lang).startswith('en'):
        return "Back to main menu"
    return "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

def _ack_keyboard(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[
        InlineKeyboardButton(_btn_text(lang), callback_data="return_to_main")
    ]])

# ---- –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----
def _iter_admins() -> Iterable[int]:
    ids = []
    try:
        ids = list(ADMIN_IDS)  # type: ignore
    except Exception:
        pass
    return [i for i in ids if isinstance(i, int) and i > 0]

async def _bg_notify_admins(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    *,
    payment_id: int,
    payment_type: Optional[str],
    product_code: Optional[str],
    file_kind: Optional[str],
    file_id: Optional[str],
) -> None:
    user = update.effective_user
    caption = (
        f"üßæ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç @{getattr(user, 'username', None) or user.id}\n"
        f"User ID: {user.id}\n"
        f"Payment ID: {payment_id}\n"
        f"–¢–∏–ø: {payment_type or '-'} | –ö–æ–¥: {product_code or '-'}"
    )

    for admin_id in _iter_admins():
        try:
            if file_kind == 'photo' and update.effective_message and update.effective_message.photo:
                await context.bot.send_photo(
                    chat_id=admin_id,
                    photo=file_id,
                    caption=caption,
                    reply_markup=get_admin_payment_actions_kb(str(payment_id)),
                )
            elif file_kind in ('image','pdf') and update.effective_message and update.effective_message.document:
                await context.bot.send_document(
                    chat_id=admin_id,
                    document=file_id,
                    caption=caption,
                    reply_markup=get_admin_payment_actions_kb(str(payment_id)),
                )
            else:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=caption,
                    reply_markup=get_admin_payment_actions_kb(str(payment_id)),
                )
        except Exception:
            log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ %s", admin_id)

    try:
        log_action(
            "admin_payment_notified",
            user_id=user.id,
            payment_id=payment_id,
            payment_type=payment_type,
            product_code=product_code,
            has_file=bool(file_id),
            file_kind=file_kind,
        )
    except Exception:
        pass

# ---- –ë—ã—Å—Ç—Ä—ã–π ACK ----
async def handle_fast_payment_ack(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.effective_message
    if not msg:
        return

    if not context.user_data.get('awaiting_screenshot'):
        return

    lang = context.user_data.get('lang', 'ru')
    payment_type = context.user_data.get('current_payment_type')
    product_code = context.user_data.get('product_code')

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    file_kind: Optional[str] = None
    file_id: Optional[str] = None
    file_unique_id: Optional[str] = None

    if msg.photo:
        file_kind = 'photo'
        file_id = msg.photo[-1].file_id
        file_unique_id = msg.photo[-1].file_unique_id
    elif msg.document:
        mime = (msg.document.mime_type or '').lower()
        if mime.startswith('image/'):
            file_kind = 'image'
            file_id = msg.document.file_id
            file_unique_id = msg.document.file_unique_id
        elif mime == 'application/pdf':
            file_kind = 'pdf'
            file_id = msg.document.file_id
            file_unique_id = msg.document.file_unique_id
        else:
            return  # –¥—Ä—É–≥–æ–π —Ç–∏–ø ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç –¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    else:
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–∫—Ä–∏–Ω–æ–º/–¥–æ–∫—É–º–µ–Ω—Ç–æ–º
    context.user_data['last_payment_proof_msg_id'] = msg.message_id

    # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
    seen = context.user_data.setdefault('_proof_seen', set())
    if isinstance(seen, set) and file_unique_id and file_unique_id in seen:
        raise ApplicationHandlerStop()
    if isinstance(seen, set) and file_unique_id:
        seen.add(file_unique_id)

    # --- –°–†–ê–ó–£ —É–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ¬´üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç‚Ä¶¬ª ---
    ids_to_try = []
    # 1) —è–≤–Ω—ã–π id –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏
    up_id = context.user_data.pop('upload_prompt_msg_id', None)
    if up_id:
        ids_to_try.append(up_id)
    # 2) –Ω–∞ –º–Ω–æ–≥–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –∫–∞–∫ "–ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ–Ω—é"
    lm_id = context.user_data.pop('last_menu_message_id', None)
    if lm_id:
        ids_to_try.append(lm_id)
    # –ø–æ–¥—á–∏—â–∞–µ–º –µ—â—ë —Ç–∏–ø –º–µ–Ω—é, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –æ–ø–∏—Ä–∞–ª–∏—Å—å –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    context.user_data.pop('last_menu_type', None)

    if ids_to_try and update.effective_chat:
        for mid in ids_to_try:
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=mid)
            except Exception:
                pass

    # 1) –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é + –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞
    ack_msg = None
    try:
        ack_msg = await msg.reply_text(
            "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.",
            reply_markup=_ack_keyboard(lang),
            disable_web_page_preview=True,
        )
    except Exception:
        log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ACK –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id ACK, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —É–±—Ä–∞—Ç—å –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
    if ack_msg:
        context.user_data['last_payment_ack_msg_id'] = ack_msg.message_id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
    context.user_data.pop('awaiting_screenshot', None)

    # 2) –§–æ–Ω: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    stub_payment_id = int(time.time())
    context.application.create_task(
        _bg_notify_admins(
            update, context,
            payment_id=stub_payment_id,
            payment_type=payment_type,
            product_code=product_code,
            file_kind=file_kind,
            file_id=file_id,
        )
    )

    # 3) –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    raise ApplicationHandlerStop()

# ---- Callback: –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----
async def on_return_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    chat = update.effective_chat
    try:
        await query.answer()
    except Exception:
        pass

    # –£–¥–∞–ª—è–µ–º ACK (–Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    ack_id = context.user_data.pop('last_payment_ack_msg_id', None)
    if ack_id and chat:
        try:
            await context.bot.delete_message(chat_id=chat.id, message_id=ack_id)
        except Exception:
            pass

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º/–¥–æ–∫—É–º–µ–Ω—Ç–æ–º (–º–æ–∂–µ—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç—å—Å—è –≤ –ª–∏—á–∫–µ)
    proof_id = context.user_data.pop('last_payment_proof_msg_id', None)
    if proof_id and chat:
        try:
            await context.bot.delete_message(chat_id=chat.id, message_id=proof_id)
        except Exception:
            pass

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    try:
        await show_main_menu(update, context, cleanup_previous=True)
    except Exception:
        if chat:
            await context.bot.send_message(
                chat_id=chat.id,
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=get_main_menu_keyboard(context.user_data.get('lang', 'ru'))
            )

# –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–±–æ—Ä–∞ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
ack_message_handler = MessageHandler(
    (filters.ChatType.PRIVATE & (filters.PHOTO | filters.Document.ALL)),
    handle_fast_payment_ack
)
back_button_handler = CallbackQueryHandler(on_return_to_main, pattern="^return_to_main$")

handlers = [ack_message_handler, back_button_handler]
