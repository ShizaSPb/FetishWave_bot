# bot/handlers/payments_ack_min.py
"""
–ú–∏–Ω–∏‚Äë–ø–∞—Ç—á: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ACK –ø–æ—Å–ª–µ —Å–∫—Ä–∏–Ω–∞ –æ–ø–ª–∞—Ç—ã,
–∞ –≤—Å—é —Ç—è–∂—ë–ª—É—é —Ä–∞–±–æ—Ç—É (Notion/—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞) —Å–¥–µ–ª–∞—Ç—å –≤ —Ñ–æ–Ω–µ.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–≤ –≤–∞—à–µ–º —Ñ–æ—Ç–æ‚Äë—Ö–µ–Ω–¥–ª–µ—Ä–µ):
    from bot.handlers.payments_ack_min import handle_payment_proof_ack
    await handle_payment_proof_ack(update, context, payment_type="webinar_joi", product_code="joi")
    return  # –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–¥–µ–ª–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ
"""
import asyncio
import logging
from typing import Optional

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from bot.database.notion_payments import create_payment_record  # —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ Payments

log = logging.getLogger(__name__)

def _main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])

async def handle_payment_proof_ack(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    *,
    payment_type: str,
    product_code: Optional[str] = None,
) -> None:
    """
    1) –ú–ì–ù–û–í–ï–ù–ù–û –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ACK —Å –∫–Ω–æ–ø–∫–æ–π ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.
    2) –í –§–û–ù–ï —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ Notion (Payments) –∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∑–æ–≤—ë—Ç –≤–∞—à notify_admin_payment_submitted().
    """
    user = update.effective_user
    chat = update.effective_chat
    message = update.effective_message

    # --- 1) –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π ACK –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
    try:
        await chat.send_message(
            "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.",
            reply_markup=_main_menu_kb(),
            disable_web_page_preview=True,
        )
    except Exception as e:
        log.warning("ACK send failed: %s", e)

    # --- 2) –°–æ–±–∏—Ä–∞–µ–º file_id (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç-–∫–∞—Ä—Ç–∏–Ω–∫–∞) ---
    proof_file_id = None
    try:
        if message.photo:
            proof_file_id = message.photo[-1].file_id  # –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        elif message.document and message.document.mime_type and message.document.mime_type.startswith("image/"):
            proof_file_id = message.document.file_id
    except Exception:
        pass

    # --- 3) –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: Notion + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞) ---
    async def _bg():
        notion_payment_id = None
        try:
            notion_payment_id = await create_payment_record(
                user_telegram_id=user.id,
                payment_type=payment_type,
                proof_file_id=proof_file_id or "n/a",
                product_code=product_code,     # –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω slug ‚Äî —Å—Ä–∞–∑—É —Å–≤—è–∂–µ–º —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º
                username=user.username,
                name=user.full_name,
            )
            log.info("Payment record created: %s", notion_payment_id)
        except Exception as e:
            log.error("create_payment_record failed: %s", e)

        # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–µ–∫—Ç–Ω—ã–π —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            from bot.handlers.admin_payments import notify_admin_payment_submitted  # type: ignore
            if notion_payment_id:
                await notify_admin_payment_submitted(
                    context=context,
                    user=user,
                    payment_type=payment_type,
                    proof_file_id=proof_file_id,
                    notion_payment_id=notion_payment_id,
                    product_code=product_code,
                )
        except Exception as e:
            log.warning("Admin notify skipped/failed: %s", e)

    asyncio.create_task(_bg())
