# bot/handlers/payments_ackpatch.py
"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π ACK –ø–æ—Å–ª–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã + –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ–ª–±—ç–∫-–Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.

- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω..." + –∫–Ω–æ–ø–∫—É "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".
- –í —Ñ–æ–Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ Notion (Payments) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.
- –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç–Ω—ã–π —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç/—É–ø–∞–ª, —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –±—Ä–æ–¥–∫–∞—Å—Ç –ø–æ ADMIN_CHAT_IDS.
"""

import asyncio
import logging
from typing import Optional, Iterable

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from bot.database.notion_payments import create_payment_record  # —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ Payments

try:
    # –í config –º–æ–∂–µ—Ç –ª–µ–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫, –∫–æ—Ä—Ç–µ–∂ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    from config import ADMIN_CHAT_IDS  # type: ignore
except Exception:
    ADMIN_CHAT_IDS = []  # –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∞ ‚Äî –ø—É—Å—Ç–æ

log = logging.getLogger(__name__)


def _main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])


def _normalize_admin_ids(value) -> list[int]:
    ids: list[int] = []
    try:
        if not value:
            return ids
        if isinstance(value, (list, tuple, set)):
            for v in value:
                try:
                    ids.append(int(v))
                except Exception:
                    pass
            return ids
        if isinstance(value, str):
            parts = value.replace(";", ",").replace(" ", ",").split(",")
            for p in parts:
                p = p.strip()
                if not p:
                    continue
                try:
                    ids.append(int(p))
                except Exception:
                    pass
            return ids
    except Exception:
        pass
    return ids


async def _notify_admins_simple(
    context: ContextTypes.DEFAULT_TYPE,
    *,
    admin_ids,
    user,
    payment_type: str,
    notion_payment_id: Optional[str],
    proof_file_id: Optional[str],
    proof_kind: str,  # "photo" | "document" | "none"
    product_code: Optional[str],
):
    if not admin_ids:
        return

    caption = (
        f"üì© –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ (fallback)\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '‚Äî'} (id {user.id})\n"
        f"–¢–∏–ø/–∫–æ–¥: {payment_type} | slug: {product_code or '‚Äî'}\n"
        f"Notion Payment: {notion_payment_id or '‚Äî'}"
    )

    tasks = []
    for admin_id in admin_ids:
        try:
            if proof_file_id and proof_kind == "photo":
                tasks.append(context.bot.send_photo(chat_id=admin_id, photo=proof_file_id, caption=caption))
            elif proof_file_id and proof_kind == "document":
                tasks.append(context.bot.send_document(chat_id=admin_id, document=proof_file_id, caption=caption))
            else:
                tasks.append(context.bot.send_message(chat_id=admin_id, text=caption))
        except Exception as e:
            log.warning("Failed to enqueue admin notify to %s: %s", admin_id, e)
    if tasks:
        await asyncio.gather(*tasks, return_exceptions=True)


async def handle_payment_proof_with_ack(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    *,
    payment_type: str,
    product_code: Optional[str] = None,
) -> None:
    """
    1) –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ACK: ¬´‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω‚Ä¶¬ª + –∫–Ω–æ–ø–∫–∞ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    2) –í —Ñ–æ–Ω–µ —Å–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion (Payments) –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤.
    """
    user = update.effective_user
    chat = update.effective_chat
    message = update.effective_message

    # --- 1) –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π ACK –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
    try:
        # –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π: –Ω–µ —á–∞—â–µ 10 —Å–µ–∫
        last = context.user_data.get("_last_payment_ack_ts")
        now = asyncio.get_event_loop().time()
        if not last or (now - float(last) > 10.0):
            await chat.send_message(
                "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.",
                reply_markup=_main_menu_kb(),
                disable_web_page_preview=True,
            )
            context.user_data["_last_payment_ack_ts"] = now
    except Exception as e:
        log.warning("Failed to send ACK to user: %s", e)

    # –í—ã—Ç–∞—â–∏–º file_id
    proof_file_id = None
    proof_kind = "none"
    try:
        if message.photo:
            proof_file_id = message.photo[-1].file_id
            proof_kind = "photo"
        elif message.document and message.document.mime_type and message.document.mime_type.startswith("image/"):
            proof_file_id = message.document.file_id
            proof_kind = "document"
    except Exception:
        pass

    # --- 2) –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (Notion + –∞–¥–º–∏–Ω—ã) ---
    async def _bg():
        notion_payment_id = None
        try:
            notion_payment_id = await create_payment_record(
                user_telegram_id=user.id,
                payment_type=payment_type,
                proof_file_id=proof_file_id or "n/a",
                product_code=product_code,
                username=user.username,
                name=user.full_name,
            )
            log.info("Payment record created: %s", notion_payment_id)
        except Exception as e:
            log.error("create_payment_record failed: %s", e)

        # 1) –ø—Ä–æ–µ–∫—Ç–Ω—ã–π —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å
        notified = False
        try:
            from bot.handlers.admin_payments import notify_admin_payment_submitted  # type: ignore
            if notion_payment_id:
                await notify_admin_payment_submitted(
                    context=context,
                    user=user,
                    payment_type=payment_type,
                    proof_file_id=proof_file_id,
                    notion_payment_id=notion_payment_id,
                    product_code=product_code,
                )
                notified = True
        except Exception as e:
            log.warning("Admin notify via project handler failed: %s", e)

        # 2) —Ñ–æ–ª–±—ç–∫ –ø–æ ADMIN_CHAT_IDS
        if not notified:
            admin_ids = _normalize_admin_ids(ADMIN_CHAT_IDS)
            try:
                await _notify_admins_simple(
                    context,
                    admin_ids=admin_ids,
                    user=user,
                    payment_type=payment_type,
                    notion_payment_id=notion_payment_id,
                    proof_file_id=proof_file_id,
                    proof_kind=proof_kind,
                    product_code=product_code,
                )
            except Exception as e:
                log.warning("Fallback admin broadcast failed: %s", e)

    asyncio.create_task(_bg())
