from __future__ import annotations

import asyncio
import logging
import time
from typing import Iterable, Optional

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ContextTypes,
    MessageHandler,
    filters,
)

# –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
from bot.services.actions import log_action

# –ü–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ config: ADMIN_IDS (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ) –∏ ADMIN_CHAT_IDS (—É—Å—Ç–∞—Ä.)
try:
    from config import ADMIN_IDS  # type: ignore
except Exception:
    ADMIN_IDS = []  # type: ignore[assignment]
try:
    from config import ADMIN_CHAT_IDS  # type: ignore
except Exception:
    ADMIN_CHAT_IDS = []  # type: ignore[assignment]

log = logging.getLogger(__name__)

MAIN_MENU_CALLBACK = "go_main_menu"  # –µ—Å–ª–∏ —É –≤–∞—Å –∏–Ω–∞—á–µ ‚Äî –ø–æ–º–µ–Ω—è–π—Ç–µ —Ç—É—Ç


def _admin_ids() -> Iterable[int]:
    raw = []
    if isinstance(ADMIN_IDS, (list, tuple)):
        raw.extend(list(ADMIN_IDS))
    if isinstance(ADMIN_CHAT_IDS, (list, tuple)):
        raw.extend(list(ADMIN_CHAT_IDS))
    elif isinstance(ADMIN_CHAT_IDS, str):
        raw.extend([x.strip() for x in ADMIN_CHAT_IDS.split(",") if x.strip()])
    out: list[int] = []
    for x in raw:
        try:
            out.append(int(x))
        except Exception:
            pass
    # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
    return list(dict.fromkeys(out))


def _user_ack_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=MAIN_MENU_CALLBACK)]]
    )


def _admin_keyboard(payment_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_pay_ok:{payment_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",   callback_data=f"admin_pay_reject:{payment_id}"),
        ]
    ])


async def _fallback_notify_admins(
    context: ContextTypes.DEFAULT_TYPE,
    *, payment_id: int,
    caption: str,
    file_kind: Optional[str],
    file_id: Optional[str],
) -> None:
    """
    –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ–ª–±—ç–∫-–Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.
    –ù–ò–ö–û–ì–î–ê –Ω–µ —Ä–æ–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫.
    """
    for admin_id in _admin_ids():
        try:
            if file_kind == "photo" and file_id:
                await context.bot.send_photo(
                    chat_id=admin_id,
                    photo=file_id,
                    caption=caption,
                    reply_markup=_admin_keyboard(payment_id),
                    disable_notification=True,
                )
            elif file_kind == "document" and file_id:
                await context.bot.send_document(
                    chat_id=admin_id,
                    document=file_id,
                    caption=caption,
                    reply_markup=_admin_keyboard(payment_id),
                    disable_notification=True,
                )
            else:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=caption,
                    reply_markup=_admin_keyboard(payment_id),
                    disable_web_page_preview=True,
                    disable_notification=True,
                )
        except Exception:
            log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É %s –ø–æ –æ–ø–ª–∞—Ç–µ %s", admin_id, payment_id)


async def _bg_process_payment_proof(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    *, payment_type: Optional[str],
    product_code: Optional[str],
    file_kind: Optional[str],
    file_id: Optional[str],
    file_unique_id: Optional[str],
    stub_payment_id: int,
) -> None:
    """
    –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –ë–î/Notion (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤.
    –õ—é–±—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≤–∏–º –∏ –ª–æ–≥–∏—Ä—É–µ–º.
    """
    user = update.effective_user
    caption = (
        f"üßæ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç @{user.username or user.id}\n"
        f"User ID: {user.id}\n"
        f"Payment ID: {stub_payment_id}\n"
        f"–¢–∏–ø: {payment_type or '-'} | –ö–æ–¥: {product_code or '-'}\n"
        f"–°—Ç–∞—Ç—É—Å: pending"
    )

    # –ï—Å–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–≤ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    used_project_notifier = False
    try:
        from bot.handlers.admin_payments import notify_admin_payment_submitted  # type: ignore
        try:
            await notify_admin_payment_submitted(  # type: ignore[misc]
                context=context,
                user_id=user.id,
                payment_id=stub_payment_id,
                caption=caption,
                file_kind=file_kind,
                file_id=file_id,
                payment_type=payment_type,
                product_code=product_code,
            )
            used_project_notifier = True
        except Exception:
            log.exception("notify_admin_payment_submitted —É–ø–∞–ª")
    except Exception:
        # –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        pass

    if not used_project_notifier:
        try:
            await _fallback_notify_admins(
                context,
                payment_id=stub_payment_id,
                caption=caption,
                file_kind=file_kind,
                file_id=file_id,
            )
        except Exception:
            log.exception("fallback-–Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–æ–≤ —É–ø–∞–ª")

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è
    try:
        log_action(
            "payment_proof_processed_bg",
            user_id=user.id,
            payment_id=stub_payment_id,
            file_kind=file_kind,
            has_file=bool(file_id),
            file_unique_id=file_unique_id,
            payment_type=payment_type,
            product_code=product_code,
        )
    except Exception:
        pass


async def handle_payment_proof_with_ack(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    *, payment_type: Optional[str] = None,
    product_code: Optional[str] = None,
) -> None:
    """
    –ì–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥: –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
    1) –°–†–ê–ó–£ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ACK –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (await).
    2) –§–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ–π (create_task) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–æ–≤/–ë–î.
    """
    msg = update.effective_message
    user = update.effective_user

    # --- –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª (photo/document) ---
    file_kind: Optional[str] = None
    file_id: Optional[str] = None
    file_unique_id: Optional[str] = None
    if msg and msg.photo:
        file_kind = "photo"
        file_id = msg.photo[-1].file_id
        file_unique_id = msg.photo[-1].file_unique_id
    elif msg and msg.document and (msg.document.mime_type or "").startswith("image/"):
        file_kind = "document"
        file_id = msg.document.file_id
        file_unique_id = msg.document.file_unique_id

    # --- 1) –°–ù–ê–ß–ê–õ–ê –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
    try:
        await msg.reply_text(
            "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=MAIN_MENU_CALLBACK)
            ]]),
            disable_web_page_preview=True,
        )
    except Exception:
        log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ACK –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", getattr(user, "id", None))

    # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ file_unique_id (–º–∏–∫—Ä–æ-–∑–∞—â–∏—Ç–∞ –æ—Ç –¥–∞–±–ª-—Ç–∞–ø–∞)
    if file_unique_id:
        dedupe = context.user_data.setdefault("_proof_seen", set())
        if isinstance(dedupe, set) and file_unique_id in dedupe:
            # –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
            return
        try:
            dedupe.add(file_unique_id)
        except Exception:
            pass

    # --- –õ–æ–≥ —Å–Ω–∏–º–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ ---
    try:
        log_action(
            "payment_proof_ack_sent",
            user_id=getattr(user, "id", None),
            username=getattr(user, "username", None),
            file_kind=file_kind,
            has_file=bool(file_id),
            file_unique_id=file_unique_id,
            payment_type=payment_type,
            product_code=product_code,
        )
    except Exception:
        pass

    # --- 2) –§–û–ù–û–í–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
    # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ ID (–µ—Å–ª–∏ —É –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç —Å–≤–æ–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ)
    stub_payment_id = int(time.time())
    context.application.create_task(
        _bg_process_payment_proof(
            update, context,
            payment_type=payment_type,
            product_code=product_code,
            file_kind=file_kind,
            file_id=file_id,
            file_unique_id=file_unique_id,
            stub_payment_id=stub_payment_id,
        )
    )


# –ù–∞ –≤–∫—É—Å: –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π handler, –µ—Å–ª–∏ —É–¥–æ–±–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
handler = MessageHandler(filters.PHOTO | filters.Document.IMAGE, handle_payment_proof_with_ack)
